--- ntfsprogsfog-2.0.0/ntfsprogs/ntfsresize.c	2007-09-19 11:51:09.000000000 -0500
+++ ntfsprogsfog-2.0.0/ntfsprogs/ntfsresize.c.fog	2011-06-22 09:52:04.995126275 -0500
@@ -134,6 +134,7 @@ static struct {
 	int info;
 	int show_progress;
 	int badsectors;
+	int dirty;
 	s64 bytes;
 	char *volume;
 } opt;
@@ -316,6 +317,7 @@ static void usage(void)
 		"    -n, --no-action        Do not write to disk\n"
 		"    -b, --bad-sectors      Support disks having bad sectors\n"
 		"    -f, --force            Force to progress\n"
+		"    -x, --dirty            Be dirty, do not force chkdisk\n"
 		"    -P, --no-progress-bar  Don't show progress bar\n"
 		"    -v, --verbose          More output\n"
 		"    -V, --version          Display version information\n"
@@ -436,12 +438,13 @@ static s64 get_new_volume_size(char *s)
  */
 static int parse_options(int argc, char **argv)
 {
-	static const char *sopt = "-bdfhinPs:vV";
+	static const char *sopt = "-bdfhxinPs:vV";
 	static const struct option lopt[] = {
 		{ "bad-sectors",no_argument,		NULL, 'b' },
 #ifdef DEBUG
 		{ "debug",	no_argument,		NULL, 'd' },
 #endif
+		{ "dirty",	no_argument,		NULL, 'x' },
 		{ "force",	no_argument,		NULL, 'f' },
 		{ "help",	no_argument,		NULL, 'h' },
 		{ "info",	no_argument,		NULL, 'i' },
@@ -460,6 +463,7 @@ static int parse_options(int argc, char
 
 	memset(&opt, 0, sizeof(opt));
 	opt.show_progress = 1;
+	opt.dirty = 0; 
 
 	while ((c = getopt_long(argc, argv, sopt, lopt, NULL)) != -1) {
 		switch (c) {
@@ -478,6 +482,9 @@ static int parse_options(int argc, char
 		case 'f':
 			opt.force++;
 			break;
+		case 'x':
+			opt.dirty = 1;
+			break;
 		case 'h':
 		case '?':
 			help++;
@@ -2290,12 +2297,21 @@ static ntfs_volume *mount_volume(void)
  */
 static void prepare_volume_fixup(ntfs_volume *vol)
 {
-	printf("Schedule chkdsk for NTFS consistency check at Windows boot "
-			"time ...\n");
-	vol->flags |= VOLUME_IS_DIRTY;
-	if (ntfs_volume_write_flags(vol, vol->flags))
-		perr_exit("Failed to set the volume dirty");
-	NVolSetWasDirty(vol);
+	if ( opt.dirty == 0 )
+	{
+		printf("*** Setting dirty flag.\n");
+	
+		vol->flags |= VOLUME_IS_DIRTY;
+		if (ntfs_volume_write_flags(vol, vol->flags))
+			perr_exit("Failed to set the volume dirty");
+	
+		NVolSetWasDirty(vol);
+	}
+	else
+	{
+		printf("*** NOT setting dirty flag.\n");
+	}
+	
 	if (vol->dev->d_ops->sync(vol->dev) == -1)
 		perr_exit("Failed to sync device");
 	printf("Resetting $LogFile ... (this might take a while)\n");
@@ -2303,6 +2319,7 @@ static void prepare_volume_fixup(ntfs_vo
 		perr_exit("Failed to reset $LogFile");
 	if (vol->dev->d_ops->sync(vol->dev) == -1)
 		perr_exit("Failed to sync device");
+
 }
 
 static void set_disk_usage_constraint(ntfs_resize_t *resize)
